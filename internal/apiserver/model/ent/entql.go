// Code generated by ent, DO NOT EDIT.

package ent

import (
	"github.com/moweilong/mo/internal/apiserver/model/ent/user"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/entql"
	"entgo.io/ent/schema/field"
)

// schemaGraph holds a representation of ent/schema at runtime.
var schemaGraph = func() *sqlgraph.Schema {
	graph := &sqlgraph.Schema{Nodes: make([]*sqlgraph.Node, 1)}
	graph.Nodes[0] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   user.Table,
			Columns: user.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: user.FieldID,
			},
		},
		Type: "User",
		Fields: map[string]*sqlgraph.FieldSpec{
			user.FieldCreateBy:      {Type: field.TypeUint32, Column: user.FieldCreateBy},
			user.FieldUpdateBy:      {Type: field.TypeUint32, Column: user.FieldUpdateBy},
			user.FieldCreateTime:    {Type: field.TypeTime, Column: user.FieldCreateTime},
			user.FieldUpdateTime:    {Type: field.TypeTime, Column: user.FieldUpdateTime},
			user.FieldDeleteTime:    {Type: field.TypeTime, Column: user.FieldDeleteTime},
			user.FieldRemark:        {Type: field.TypeString, Column: user.FieldRemark},
			user.FieldStatus:        {Type: field.TypeEnum, Column: user.FieldStatus},
			user.FieldTenantID:      {Type: field.TypeUint32, Column: user.FieldTenantID},
			user.FieldUsername:      {Type: field.TypeString, Column: user.FieldUsername},
			user.FieldNickname:      {Type: field.TypeString, Column: user.FieldNickname},
			user.FieldRealname:      {Type: field.TypeString, Column: user.FieldRealname},
			user.FieldEmail:         {Type: field.TypeString, Column: user.FieldEmail},
			user.FieldMobile:        {Type: field.TypeString, Column: user.FieldMobile},
			user.FieldTelephone:     {Type: field.TypeString, Column: user.FieldTelephone},
			user.FieldAvatar:        {Type: field.TypeString, Column: user.FieldAvatar},
			user.FieldAddress:       {Type: field.TypeString, Column: user.FieldAddress},
			user.FieldRegion:        {Type: field.TypeString, Column: user.FieldRegion},
			user.FieldDescription:   {Type: field.TypeString, Column: user.FieldDescription},
			user.FieldGender:        {Type: field.TypeEnum, Column: user.FieldGender},
			user.FieldAuthority:     {Type: field.TypeEnum, Column: user.FieldAuthority},
			user.FieldLastLoginTime: {Type: field.TypeTime, Column: user.FieldLastLoginTime},
			user.FieldLastLoginIP:   {Type: field.TypeString, Column: user.FieldLastLoginIP},
			user.FieldOrgID:         {Type: field.TypeUint32, Column: user.FieldOrgID},
			user.FieldPositionID:    {Type: field.TypeUint32, Column: user.FieldPositionID},
			user.FieldWorkID:        {Type: field.TypeUint32, Column: user.FieldWorkID},
			user.FieldRoles:         {Type: field.TypeJSON, Column: user.FieldRoles},
		},
	}
	return graph
}()

// predicateAdder wraps the addPredicate method.
// All update, update-one and query builders implement this interface.
type predicateAdder interface {
	addPredicate(func(s *sql.Selector))
}

// addPredicate implements the predicateAdder interface.
func (_q *UserQuery) addPredicate(pred func(s *sql.Selector)) {
	_q.predicates = append(_q.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the UserQuery builder.
func (_q *UserQuery) Filter() *UserFilter {
	return &UserFilter{config: _q.config, predicateAdder: _q}
}

// addPredicate implements the predicateAdder interface.
func (m *UserMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the UserMutation builder.
func (m *UserMutation) Filter() *UserFilter {
	return &UserFilter{config: m.config, predicateAdder: m}
}

// UserFilter provides a generic filtering capability at runtime for UserQuery.
type UserFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *UserFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[0].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint32 predicate on the id field.
func (f *UserFilter) WhereID(p entql.Uint32P) {
	f.Where(p.Field(user.FieldID))
}

// WhereCreateBy applies the entql uint32 predicate on the create_by field.
func (f *UserFilter) WhereCreateBy(p entql.Uint32P) {
	f.Where(p.Field(user.FieldCreateBy))
}

// WhereUpdateBy applies the entql uint32 predicate on the update_by field.
func (f *UserFilter) WhereUpdateBy(p entql.Uint32P) {
	f.Where(p.Field(user.FieldUpdateBy))
}

// WhereCreateTime applies the entql time.Time predicate on the create_time field.
func (f *UserFilter) WhereCreateTime(p entql.TimeP) {
	f.Where(p.Field(user.FieldCreateTime))
}

// WhereUpdateTime applies the entql time.Time predicate on the update_time field.
func (f *UserFilter) WhereUpdateTime(p entql.TimeP) {
	f.Where(p.Field(user.FieldUpdateTime))
}

// WhereDeleteTime applies the entql time.Time predicate on the delete_time field.
func (f *UserFilter) WhereDeleteTime(p entql.TimeP) {
	f.Where(p.Field(user.FieldDeleteTime))
}

// WhereRemark applies the entql string predicate on the remark field.
func (f *UserFilter) WhereRemark(p entql.StringP) {
	f.Where(p.Field(user.FieldRemark))
}

// WhereStatus applies the entql string predicate on the status field.
func (f *UserFilter) WhereStatus(p entql.StringP) {
	f.Where(p.Field(user.FieldStatus))
}

// WhereTenantID applies the entql uint32 predicate on the tenant_id field.
func (f *UserFilter) WhereTenantID(p entql.Uint32P) {
	f.Where(p.Field(user.FieldTenantID))
}

// WhereUsername applies the entql string predicate on the username field.
func (f *UserFilter) WhereUsername(p entql.StringP) {
	f.Where(p.Field(user.FieldUsername))
}

// WhereNickname applies the entql string predicate on the nickname field.
func (f *UserFilter) WhereNickname(p entql.StringP) {
	f.Where(p.Field(user.FieldNickname))
}

// WhereRealname applies the entql string predicate on the realname field.
func (f *UserFilter) WhereRealname(p entql.StringP) {
	f.Where(p.Field(user.FieldRealname))
}

// WhereEmail applies the entql string predicate on the email field.
func (f *UserFilter) WhereEmail(p entql.StringP) {
	f.Where(p.Field(user.FieldEmail))
}

// WhereMobile applies the entql string predicate on the mobile field.
func (f *UserFilter) WhereMobile(p entql.StringP) {
	f.Where(p.Field(user.FieldMobile))
}

// WhereTelephone applies the entql string predicate on the telephone field.
func (f *UserFilter) WhereTelephone(p entql.StringP) {
	f.Where(p.Field(user.FieldTelephone))
}

// WhereAvatar applies the entql string predicate on the avatar field.
func (f *UserFilter) WhereAvatar(p entql.StringP) {
	f.Where(p.Field(user.FieldAvatar))
}

// WhereAddress applies the entql string predicate on the address field.
func (f *UserFilter) WhereAddress(p entql.StringP) {
	f.Where(p.Field(user.FieldAddress))
}

// WhereRegion applies the entql string predicate on the region field.
func (f *UserFilter) WhereRegion(p entql.StringP) {
	f.Where(p.Field(user.FieldRegion))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *UserFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(user.FieldDescription))
}

// WhereGender applies the entql string predicate on the gender field.
func (f *UserFilter) WhereGender(p entql.StringP) {
	f.Where(p.Field(user.FieldGender))
}

// WhereAuthority applies the entql string predicate on the authority field.
func (f *UserFilter) WhereAuthority(p entql.StringP) {
	f.Where(p.Field(user.FieldAuthority))
}

// WhereLastLoginTime applies the entql time.Time predicate on the last_login_time field.
func (f *UserFilter) WhereLastLoginTime(p entql.TimeP) {
	f.Where(p.Field(user.FieldLastLoginTime))
}

// WhereLastLoginIP applies the entql string predicate on the last_login_ip field.
func (f *UserFilter) WhereLastLoginIP(p entql.StringP) {
	f.Where(p.Field(user.FieldLastLoginIP))
}

// WhereOrgID applies the entql uint32 predicate on the org_id field.
func (f *UserFilter) WhereOrgID(p entql.Uint32P) {
	f.Where(p.Field(user.FieldOrgID))
}

// WherePositionID applies the entql uint32 predicate on the position_id field.
func (f *UserFilter) WherePositionID(p entql.Uint32P) {
	f.Where(p.Field(user.FieldPositionID))
}

// WhereWorkID applies the entql uint32 predicate on the work_id field.
func (f *UserFilter) WhereWorkID(p entql.Uint32P) {
	f.Where(p.Field(user.FieldWorkID))
}

// WhereRoles applies the entql json.RawMessage predicate on the roles field.
func (f *UserFilter) WhereRoles(p entql.BytesP) {
	f.Where(p.Field(user.FieldRoles))
}
